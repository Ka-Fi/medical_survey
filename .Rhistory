}
.content-wrapper,
.right-side {background-color: #1ff456;
}
.skin-blue .main-header .logo {
background-color: #f4b943;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #f4b943;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #f4b943;
}
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #f4b943;
}
/* active selected tab in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
background-color: #ff0000;
}
/* other links in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu a{
background-color: #00ff00;
color: #000000;
}
/* other links in the sidebarmenu when hovered */
.skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
background-color: #ff69b4;
}
'))
)
)
server <- function(input, output) {
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
output$mytable <- renderTable({
dat <- data.frame(
country = c('USA', 'China','Working directory'),
flag = c('<img src="https://www.crossed-flag-pins.com/animated-flag-gif/images/Flag_USA.jpg" height="52"></img>',
'<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Flag_of_the_People%27s_Republic_of_China.svg/200px-Flag_of_the_People%27s_Republic_of_China.svg.png" height="52"></img>',
getwd())
)
dat
}, sanitize.text.function = function(x) x)
output$condition <-
renderText({
getWeatherFromNOAA(station_id = input$station, message = FALSE)$condition
})
output$time <-
renderText({
getWeatherFromNOAA(station_id = input$station, message = FALSE)$observation_time
})
output$vboxC <- renderValueBox({
t <-
as.numeric(getWeatherFromNOAA(station_id = input$station, message = FALSE)$temp_c)
if (t  > 30)
{
valueBox(t, width = 3, subtitle = 'C', color = 'red')
}
else if (t < 10)
{
valueBox(t, width = 3, subtitle = 'C', color = 'blue')
}
else {
valueBox(t, width = 3, subtitle = 'C', color = 'yellow')
}
})
output$vboxF <- renderValueBox({
t <-
as.numeric(getWeatherFromNOAA(station_id = input$station, message = FALSE)$temp_f)
if (t  > 86)
{
valueBox(t, width = 3, subtitle = 'F', color = 'red')
}
else if (t < 50)
{
valueBox(t, width = 3, subtitle = 'F', color = 'blue')
}
else {
valueBox(t, width = 3, subtitle = 'F', color = 'yellow')
}
})
}
shinyApp(ui, server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dane
head(dane)
head(dane_new)
shiny::runApp()
sum(dane_new)/2
sum(dane_new)/2
length(dane_new)
dim(dane_new)
row(dane_new)
rows(dane_new)
dim(dane_new)[1]
shiny::runApp()
box_2_plot(dane_new, var_1, var_2, 1)
var_1 <- paste(czynniki_new[5], badanie[1], sep = "")
var_2 <- paste(czynniki_new[5], badanie[2], sep = "")
var_3 <- paste(czynniki_new[5], badanie[3], sep = "")
box_2_plot(dane_new, var_1, var_2, 1)
czynniki_new
p<-p+ scale_color_brewer()
shiny::runApp()
shiny::runApp()
czynniki_new
shiny::runApp()
czynniki_new[5]
shiny::runApp()
punkt_2_plot(dane, var_1, var_2, "metoda_2", TRUE)
punkt_2_plot(dane_new, var_1, var_2, "metoda_2", TRUE)
dane_new
df <- data_ %>% filter(metoda == "metoda_1")
df <- dane_new %>% filter(metoda == "metoda_1")
df
df$badane <- as.factor(df$badane)
dane$badane
p <- ggplot(df, aes_string(var_1, var_2)
)
p
ggplot(df, aes_string(var_1, var_2)
df$badane <- as.factor(df$badane))
p <- ggplot(df, aes_string(var_1, var_2))
p <- p + geom_point(aes(size = 1.1)) + geom_jitter() +
scale_size(guide="none")
p <- p + stat_smooth(method=lm, fullrange=TRUE, se = FALSE)
p <- p+ theme(legend.justification=c(1,0), legend.position=c(1,0))
p<-p+ scale_color_brewer()
return(p)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cbPalette <- c("#8484ff", "#1414ff")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dane
box_2_plot(dane, var_1, var_3)
df=dane
if(group != "all"){df <- df %>% filter(grupa == group) }
group="all"
if(group != "all"){df <- df %>% filter(grupa == group) }
values <- c(df[, var_1], df[,var_2])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
group="metoda_1"
if(group != "all"){df <- df %>% filter(grupa == group) }
dane
head(dane)
df$metoda
df
df <- df %>% filter(grupa == group)
df$metoda
dane
head(dane)
head(dane)
head(df)
df=dane
head(df)
group="metoda_1"
if(group != "all"){df <- df %>% filter(grupa == group) }
df
df$metoda
df=dane
dane(dane$metoda="metoda_1")
dane$metoda="metoda_1"
dane$metoda="metoda_1"dane
dane <- read.csv("dane_medyczne.csv", sep = ";")
dane$pacjent <- rep(1:35, rep(2,35))
# Dodawanie zmiennych (podzial zmienenj grupa na dwie niezalezne)
badane <- sapply(dane$grupa, function(x)
ifelse(x == 1 || x == 2, 1, 0))
metoda <- sapply(dane$grupa, function(x)
ifelse(x == 1 || x == 5, "metoda_1",
ifelse(x == 0 || x == 2, "metoda_2","-")))
dane <- cbind(badane, metoda, dane)
index <- seq(from = 7, to = 54, by = 3)
zmienne <- names(dane)
czynniki <- substrRight(zmienne[index])
badanie <- c("_0", "_2", "_90")
dane$metoda
dane$metoda-"metoda_1"
dane$metoda("metoda_1")
dane$metoda="metoda_1"
# Wczytywanie danych
dane <- read.csv("dane_medyczne.csv", sep = ";")
dane$pacjent <- rep(1:35, rep(2,35))
# Dodawanie zmiennych (podzial zmienenj grupa na dwie niezalezne)
badane <- sapply(dane$grupa, function(x)
ifelse(x == 1 || x == 2, 1, 0))
metoda <- sapply(dane$grupa, function(x)
ifelse(x == 1 || x == 5, "metoda_1",
ifelse(x == 0 || x == 2, "metoda_2","-")))
dane <- cbind(badane, metoda, dane)
index <- seq(from = 7, to = 54, by = 3)
zmienne <- names(dane)
czynniki <- substrRight(zmienne[index])
badanie <- c("_0", "_2", "_90")
dane$metoda=="metoda_1"
dane(dane$metoda=="metoda_1")
dane[dane$metoda=="metoda_1"
]
dane[dane$metoda=="metoda_1",]
dane[dane$metoda=="metoda_2",]
dane
df=dane
group="metoda_1"
if(group != "all")
{df <- df %>% filter(grupa == group) }
sum(dane$metoda="metoda1")
sum(dane$metoda=="metoda1")
length(dane$metoda=="metoda1")
length(dane$metoda=="metoda_1")
sum(dane$metoda=="metoda_1")
sum(dane$metoda=="metoda_2")
df=dane
group="metoda_1"
if(group != "all")
{df <- df %>% filter(grupa == group) }
df=dane
group="metoda_1"
values <- c(df[, var_1], df[,var_2])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p <- p + geom_boxplot(aes(fill = names)) + geom_jitter()
p <- p+ theme(legend.justification=c(1,0), legend.position=c(1,0))
p <- p + xlab("czynniki") +ylab("wartosci")
p <- p+scale_fill_discrete(name="Czynniki")+scale_fill_manual(values=cbPalette)
return(p)
p
dane$metoda=="metoda_1"
dane(dane$metoda=="metoda_1")
dane[dane$metoda=="metoda_1",]
shiny::runApp()
df=dane
group="metoda_1"
box_3_plot <- function(df, var_1, var_2, var_3, group = "all"){
if(group != "all")
{df<-df[df$metoda==group,]}
values <- c(df[, var_1], df[,var_2], df[,var_3])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2])),
rep(var_3, length(df[,var_3]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p
df=dane
group="all"
box_3_plot <- function(df, var_1, var_2, var_3, group = "all"){
if(group != "all")
{df<-df[df$metoda==group,]}
# df <- df %>% filter(grupa == group)
values <- c(df[, var_1], df[,var_2], df[,var_3])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2])),
rep(var_3, length(df[,var_3]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p <- p + geom_boxplot(aes(fill = names)) + geom_jitter()
p <- p+ theme(legend.justification=c(1,0), legend.position=c(1,0)) + scale_fill_manual(values=cbPalette)
return(p)
if(group != "all")
{df<-df[df$metoda==group,]}
values <- c(df[, var_1], df[,var_2], df[,var_3])
function (x = character(), levels, labels = levels, exclude = NA,
values <- c(df[, var_1], df[,var_2], df[,var_3])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2])),
rep(var_3, length(df[,var_3]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p
df=dane
df <- df %>% filter(grupa == group)
values <- c(df[, var_1], df[,var_2], df[,var_3])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2])),
rep(var_3, length(df[,var_3]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p
group="metoda_1"
df <- df %>% filter(grupa == group)
values <- c(df[, var_1], df[,var_2], df[,var_3])
names <- factor(c(rep(var_1, length(df[,var_1])),
rep(var_2, length(df[,var_2])),
rep(var_3, length(df[,var_3]))))
temp_df <- data.frame(values=values, names=names)
p <- ggplot(temp_df, aes(names, values))
p
p <- p + geom_boxplot(aes(fill = names)) + geom_jitter()
p <- p+ theme(legend.justification=c(1,0), legend.position=c(1,0)) + scale_fill_manual(values=cbPalette)
p
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
dane_new
head(dane_new)
shiny::runApp()
anova_all
anova_all[,1]
anova_all[,2:]
anova_all[,2:6]
sp_all
wl_all
shiny::runApp()
anova_all_new <- read.csv("anova_all_new.csv", sep = ",")
anowa_all_new
shiny::runApp()
anova_all_new <- read.csv("anova_all_new.csv", sep = ",")
anowa_all_new  <-anova_all[,2:6]
sp_all_new <- read.csv("statystyki_podstawowe_all_new.csv", sep = ",")
sp_all_new <-sp_all_new[,2:8]
wl_all_new <- read.csv("wilcoxon_all_new.csv", sep = ",")
wl_all_new <-wl_all_new[,2:6]
wl_all_roznice_new <- read.csv("wilcoxon_all_roznice_new.csv", sep = ",")
wl_all_roznice_new <-wl_all_roznice_new[,2:6]
shiny::runApp()
shiny::runApp()
anova_all_new
anova_all
anova_all_new <- read.csv("anova_all_new.csv", sep = ",")
anowa_all_new  <-anova_all_new[,2:6]
anowa_all_new
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
substrRight <- function(x){
dane_new <- read.csv("Dane_analiza_amplitudyM_rod_ospa.csv", sep=";")
shiny::runApp()
# {df <- data_ %>% filter(metoda == metoda_)}
shiny::runApp()
shiny::runApp()
data_=dane
var_1
var_2
metoda_="all"
if(metoda_ != "all")
# {df<-df[df$metoda==group,]}
{df <- data_ %>% filter(metoda == metoda_)}
badane
df$badane <- as.factor(df$badane)
df=data_
df$badane <- as.factor(df$badane)
p <- ggplot(df, aes_string(var_1, var_2, color = "badane"))
p <- p + geom_point(aes(size = 1.1)) + geom_jitter() +
scale_size(guide="none")
if( czy_regresja==TRUE)
p <- p + stat_smooth(method=lm, fullrange=TRUE, se = FALSE)
p <- p+ theme(legend.justification=c(1,0), legend.position=c(1,0))
p<-p+ scale_color_manual(values=cbPalette)
return(p)
p
shiny::runApp()
shiny::runApp()
shiny::runApp()
nowa_anova  <-nowa_anova[,2:6]
nowa_anova <- read.csv("nowa_anova.csv", sep = ",")
nowa_anova  <-nowa_anova[,2:6]
nowa_anova
shiny::runApp()
anova_all_new <- read.csv("anova_all.csv", sep = ",")
anova_all_new  <-anova_all_new[,2:6]
shiny::runApp()
anova_all_new <- read.csv("anova_all_new.csv", sep = ",")
anova_all_new <-anova_all_new[,2:6]
sp_all_new <- read.csv("statystyki_podstawowe_all_new.csv", sep = ",")
sp_all_new <-sp_all_new[,2:8]
wl_all_new <- read.csv("wilcoxon_all_new.csv", sep = ",")
wl_all_new <-wl_all_new[,2:6]
wl_all_roznice_new <- read.csv("wilcoxon_all_roznice_new.csv", sep = ",")
wl_all_roznice_new <-wl_all_roznice_new[,2:6]
shiny::runApp()
shiny::runApp()
# Wczytywanie danych
dane <- read.csv("dane_medyczne.csv", sep = ";")
dane$pacjent <- rep(1:35, rep(2,35))
# Dodawanie zmiennych (podzial zmienenj grupa na dwie niezalezne)
badane <- sapply(dane$grupa, function(x)
ifelse(x == 1 || x == 2, 1, 0))
metoda <- sapply(dane$grupa, function(x)
ifelse(x == 1 || x == 5, "metoda_1",
ifelse(x == 0 || x == 2, "metoda_2","-")))
dane <- cbind(badane, metoda, dane)
index <- seq(from = 7, to = 54, by = 3)
zmienne <- names(dane)
czynniki <- substrRight(zmienne[index])
badanie <- c("_0", "_2", "_90")
df$badane <- as.factor(df$badane)
df=data_
df$badane <- as.factor(df$badane)
data_=dane
df=data_
df$badane <- as.factor(df$badane)
df$badane
dane$badane
dane_new <- read.csv("Dane_analiza_amplitudyM_rod_ospa.csv", sep=";")
dane_new$grupa
dane_new$grupa
gr<-matrix(dane_new$grupa,ncol = 2)
gr
gr<-matrix(dane_new$grupa,nrow = 2)
gr
grupa <- sapply(gr, function(x)
ifelse(x == 1 || x == 2, 1, 0))
grupa
gr<-matrix(grupa,nrow = 2)
gr
